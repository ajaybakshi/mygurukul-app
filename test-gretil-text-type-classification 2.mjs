/**
 * Gretil Text Type Classification Tests - Phase 1
 * Comprehensive unit tests for cross-corpus logical unit extraction
 */

import { gretilTextTypeClassifier } from './src/lib/services/gretilTextTypeClassifier.js';
import { GretilTextType, ClassificationConfidence } from './src/types/gretil-types.js';

// Sample texts for testing (extracted from actual Gretil corpus)
const SAMPLE_TEXTS = {
  // EPIC - Ramayana sample
  ramayana: {
    filename: 'Ramayana.txt',
    content: `# Header
## Title: Ramayana
## Text

Ram_1,1.1 o·πÉ nama·∏• ≈õrƒ´rƒÅmƒÅya ||

atha rƒÅmƒÅya·πáakathƒÅ pravak·π£yƒÅma·∏• |
rƒÅmƒÅya·πáakathƒÅ hi pu·πáyamahattamƒÅ |
≈õrotavyƒÅ sarvadƒÅ |

sargasya prathama·∏• sarga·∏• |
valmƒ´kirƒÅmƒÅya·πáam ||
ƒÅkhyƒÅnam paramadhƒÅmyam |
itihƒÅsa ratnƒÅkaram |
kavibhi·∏• bahudhƒÅkhyƒÅtam |
≈õrutvƒÅ yad brahma·πáa·∏• purƒÅ ||

tad aham api vak·π£yƒÅmi |
sarvabƒÅdhavivarjitam |
≈õƒÅstrƒÅ·πáƒÅm iha sarve·π£ƒÅm |
pramƒÅ·πáam paramam hi tat ||
`
  },

  // HYMNAL - Rig Veda Khila sample
  rigVedaKhila: {
    filename: 'Rig_Veda_Khila.txt',
    content: `# Header
## Title: Rig Veda Khila
## Text

RvKh_1,1.1 indrƒÅya gƒÅthino arcata ||
indra·πÉ namasya dhƒ´taya·∏• |
indra·πÉ v·πõ·π£a·πáam abhi·π£·π≠aye ||
indra·πÉ v·πõ·π£a·πáam abhi·π£·π≠aye |

RvKh_1,1.2 yaj√±asya devƒÅ ·πõtvija·∏• ||
·πõtviya·∏• kratum akramu·∏• |
·πõtviya·∏• samidhƒ´dhire ||
·πõtviya·∏• adhvaram akramu·∏• |

RvKh_1,1.3 agnim ƒ´·∏çe purohitam ||
yaj√±asya deva·πÉ ·πõtvijam |
hotƒÅra·πÉ ratnadhƒÅtamam ||
agnim ƒ´·∏çe purohitam |
`
  },

  // PHILOSOPHICAL - Chandogya Upanishad sample
  chandogya: {
    filename: 'Chandogya_Upanishad.txt',
    content: `# Header
## Title: Chandogya Upanishad
## Text

chup_1,1.1 o·πÉ || tat tvam asi || ≈õvetaketurƒÅra·πáyakasya putro ha sma varu·πáam pitƒÅram upasasƒÅra ||

adhƒ´hi bhagavo brahmeti ||
tasmƒÅ etat provƒÅca || yad vai j√±ƒÅtam parok·π£am iva bhavati ||
yad vai j√±ƒÅtam aparok·π£am bhavati ||
tad vai j√±ƒÅtam ||
na hi avidyayƒÅtmƒÅ vindate ||
avidyayƒÅ hi vindate ||

atha vidyayƒÅtmƒÅ vindate ||
vidyayƒÅ hi vindate ||
tasmƒÅ etat provƒÅca ||
`
  },

  // PHILOSOPHICAL - Bhagavad Gita sample
  bhagavadGita: {
    filename: 'Bhagvad_Gita.txt',
    content: `# Header
## Title: Bhagavad Gita
## Text

bhg 1.1 dh·πõtarƒÅ·π£·π≠ra uvƒÅca ||
dharma-k·π£etre kuru-k·π£etre
samavetƒÅ yuyutsava·∏• |
mƒÅmakƒÅ·∏• pƒÅ·πá·∏çavƒÅ≈õ caiva
kim akurvata sa·πÉjaya ||

bhg 1.2 sa·πÉjaya uvƒÅca ||
d·πõ·π£·π≠vƒÅ tu pƒÅ·πá·∏çavƒÅnƒ´kam
vy≈´·∏çha·πÉ duryodhana·∏• tadƒÅ |
ƒÅcƒÅryam upasa·πÖgamya
rƒÅjƒÅ vacanam abravƒ´t ||

bhg 1.3 pa≈õyaitƒÅ·πÉ pƒÅ·πá·∏çu-putrƒÅ·πáƒÅm
ƒÅcƒÅrya mahatƒ´·πÉ cam≈´m |
vy≈´·∏çhƒÅ·πÉ drupad-putre·πáa
tava ≈õi·π£ye·πáa dhƒ´matƒÅ ||
`
  },

  // NARRATIVE - Agni Purana sample
  agniPurana: {
    filename: 'Agni_Purana.txt',
    content: `# Header
## Title: Agni Purana
## Text

ap_1.001ab janamejaya uvƒÅca ||
·πõ·π£aya·∏• sarva evaite
ki·πÉ kurvanti mahƒÅtmƒÅna·∏• |
kasyƒÅ·πÉ vƒÅ sarva evaite
samƒÅyƒÅtƒÅ·∏• samƒÅgatƒÅ·∏• ||

ap_1.002ab vai≈õampƒÅyana uvƒÅca ||
janamejaya mahƒÅrƒÅja
≈õ·πõ·πáu·π£vƒÅvahito 'nagha |
pƒÅ√±cƒÅlƒ´·πÉ bhƒ´masenena
nƒÅ·∏çƒ´·πÉ sa·πÉsthƒÅpya pƒÅrthiva ||
`
  }
};

function runTextTypeClassificationTests() {
  console.log('üß™ Starting Gretil Text Type Classification Tests - Phase 1\n');

  const results = [];
  let passed = 0;
  let total = 0;

  // Test each sample text
  for (const [key, sample] of Object.entries(SAMPLE_TEXTS)) {
    total++;
    console.log(`\nüìñ Testing: ${sample.filename}`);

    try {
      const classification = gretilTextTypeClassifier.classifyText(
        sample.filename,
        sample.content
      );

      const debugInfo = gretilTextTypeClassifier.analyzeForDebugging(
        sample.filename,
        sample.content
      );

      console.log(`   Expected Type: ${getExpectedType(key)}`);
      console.log(`   Classified As: ${classification.textType}`);
      console.log(`   Confidence: ${classification.confidence}`);
      console.log(`   Reasoning: ${classification.reasoning}`);

      // Check if classification is correct
      const expectedType = getExpectedType(key);
      const isCorrect = classification.textType === expectedType;

      if (isCorrect) {
        passed++;
        console.log(`   ‚úÖ PASS`);
      } else {
        console.log(`   ‚ùå FAIL - Expected: ${expectedType}, Got: ${classification.textType}`);
      }

      // Log detailed analysis for debugging
      console.log(`   üìä Debug Info:`);
      console.log(`      Filename matches: ${debugInfo.allMatches.filename.length}`);
      console.log(`      Content matches: ${debugInfo.allMatches.content.length}`);
      console.log(`      Structural matches: ${debugInfo.allMatches.structural.length}`);
      console.log(`      Detected patterns: ${classification.detectedPatterns.join(', ')}`);

      results.push({
        test: key,
        filename: sample.filename,
        expected: expectedType,
        classified: classification.textType,
        confidence: classification.confidence,
        passed: isCorrect,
        patterns: classification.detectedPatterns
      });

    } catch (error) {
      console.log(`   üí• ERROR: ${error.message}`);
      results.push({
        test: key,
        filename: sample.filename,
        error: error.message,
        passed: false
      });
    }
  }

  // Summary
  console.log(`\nüìä Test Results Summary:`);
  console.log(`   Total Tests: ${total}`);
  console.log(`   Passed: ${passed}`);
  console.log(`   Failed: ${total - passed}`);
  console.log(`   Success Rate: ${((passed / total) * 100).toFixed(1)}%`);

  // Detailed results
  console.log(`\nüìã Detailed Results:`);
  results.forEach(result => {
    if (result.error) {
      console.log(`   ${result.test}: üí• ERROR - ${result.error}`);
    } else {
      const status = result.passed ? '‚úÖ' : '‚ùå';
      console.log(`   ${result.test}: ${status} ${result.expected} ‚Üí ${result.classified} (${result.confidence})`);
    }
  });

  return { passed, total, results };
}

function getExpectedType(testKey) {
  const expectedTypes = {
    ramayana: GretilTextType.EPIC,
    rigVedaKhila: GretilTextType.HYMNAL,
    chandogya: GretilTextType.PHILOSOPHICAL,
    bhagavadGita: GretilTextType.PHILOSOPHICAL,
    agniPurana: GretilTextType.NARRATIVE
  };
  return expectedTypes[testKey];
}

// Test backward compatibility
function runBackwardCompatibilityTests() {
  console.log('\nüîÑ Testing Backward Compatibility\n');

  const legacyTypes = ['veda', 'upanishad', 'purana', 'epic', 'gita', 'other'];
  let compatPassed = 0;
  let compatTotal = 0;

  for (const legacyType of legacyTypes) {
    compatTotal++;
    try {
      const modernType = gretilTextTypeClassifier.fromLegacyType(legacyType);
      const backToLegacy = gretilTextTypeClassifier.toLegacyType(modernType);

      const isCompatible = backToLegacy === legacyType;
      if (isCompatible) {
        compatPassed++;
        console.log(`   ${legacyType} ‚Üî ${modernType} ‚úÖ`);
      } else {
        console.log(`   ${legacyType} ‚Üí ${modernType} ‚Üí ${backToLegacy} ‚ùå`);
      }
    } catch (error) {
      console.log(`   ${legacyType}: üí• ERROR - ${error.message}`);
    }
  }

  console.log(`\nüîÑ Backward Compatibility: ${compatPassed}/${compatTotal} passed`);
  return { compatPassed, compatTotal };
}

// Run all tests
if (require.main === module) {
  console.log('üöÄ Gretil Text Type Classification Test Suite - Phase 1\n');
  console.log('=' .repeat(60));

  const testResults = runTextTypeClassificationTests();
  const compatResults = runBackwardCompatibilityTests();

  console.log('\n' + '=' .repeat(60));
  console.log('üèÅ FINAL SUMMARY:');
  console.log(`   Classification Tests: ${testResults.passed}/${testResults.total} passed`);
  console.log(`   Compatibility Tests: ${compatResults.compatPassed}/${compatResults.compatTotal} passed`);
  console.log(`   Overall Success: ${((testResults.passed + compatResults.compatPassed) / (testResults.total + compatResults.compatTotal) * 100).toFixed(1)}%`);

  // Exit with appropriate code
  const overallSuccess = testResults.passed === testResults.total && compatResults.compatPassed === compatResults.compatTotal;
  process.exit(overallSuccess ? 0 : 1);
}

export {
  runTextTypeClassificationTests,
  runBackwardCompatibilityTests,
  SAMPLE_TEXTS
};
